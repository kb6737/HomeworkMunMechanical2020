#!/usr/bi\nenv python 2.7
#  Copyright 2017 Keegan Joseph Brophy
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
from sympy import *


class Bar(object):
	barCount = 0

	def __init__(self, number, distance, velocity, acceleration, theta, theta_dot, theta_dot_dot):
		stripvars = [number, distance, velocity, acceleration, theta, theta_dot, theta_dot_dot]
		varstiped = list()
		for x in stripvars:
			if type(x) == str:
				varstiped.append(symbols(str(str(x)+str(stripvars[0]-1)).strip(", +,")))
			else:
				varstiped.append(x)
		pair1 = 0
		pair2 = 0
		pair3 = 0
		for x in varstiped:
			if type(x) == Symbol:
				if varstiped.index(x) == 1:
					pair1 += 1
				if varstiped.index(x) == 2:
					pair2 += 1
				if varstiped.index(x) == 3:
					pair3 += 1
				if varstiped.index(x) == 4:
					pair1 += 1
				if varstiped.index(x) == 5:
					pair2 += 1
				if varstiped.index(x) == 6:
					pair3 += 1
		self.number = number
		self.distance = varstiped[1]
		self.velocity = varstiped[2]
		self.acceleration = varstiped[3]
		self.theta = varstiped[4]
		self.theta_dot = varstiped[5]
		self.theta_dot_dot = varstiped[6]
		self.missingdata = {'pair1': pair1, 'pair2': pair2, 'pair3': pair3}
		Bar.barCount += 1

	def updatemissing(self, grouping=0, num=0):
		if grouping == 'pair1':
			self.missingdata['pair1'] = num
		if grouping == 'pair2':
			self.missingdata['pair2'] = num
		if grouping == 'pair3':
			self.missingdata['pair3'] = num
		if grouping == 'distance':
			self.distance = num
		if grouping == 'velocity':
			self.velocity = num
		if grouping == 'acceleration':
			self.acceleration = num
		if grouping == 'theta':
			self.theta = num
		if grouping == 'theta_dot':
			self.theta_dot = num
		if grouping == 'theta_dot_dot':
			self.theta_dot_dot = num

class Vector(object):
	vectorCount = 0

	def __init__(self, i=0, j=0, k=0):
		self.d = sqrt(i**2+j**2+k**2)
		self.i = i
		self.j = j
		self.k = k
		Vector.vectorCount += 1


def bargen(bars, numberofbars=4):
	x = 0
	vectordistance = list()
	vectorvelocity = list()
	vectoracceleration = list()
	while x < numberofbars:
		# r=r1(cos(t)I+sin(t)J
		vectordistance.append(Vector((bars[x].distance * (cos(bars[x].theta))), (bars[x].distance * sin(bars[x].theta))))
		# rp=rp(cos i+ sin j) +r(-tp sin I + tp cos J)
		vectorvelocity.append(
			Vector(bars[x].velocity * cos(bars[x].theta) - bars[x].distance * bars[x].theta_dot * sin(bars[x].theta), bars[x].velocity * sin(bars[x].theta) + bars[x].distance * bars[x].theta_dot * cos(bars[x].theta)))
		# rpp = rpp cos I sin J + r tpp -sin I + cos J - rtp^2 cos I + sinJ + 2rp tp -sinI + cos J
		vectoracceleration.append(Vector(
			bars[x].acceleration * cos(bars[x].theta) - bars[x].distance * bars[x].theta_dot_dot * sin(bars[x].theta) - bars[x].distance * ((bars[x].theta_dot) ** 2) * cos(bars[x].theta) - 2 * bars[x].velocity * bars[x].theta_dot * sin(bars[x].theta)
			, bars[x].acceleration * sin(bars[x].theta) + bars[x].distance * bars[x].theta_dot_dot * cos(bars[x].theta) - bars[x].distance * (bars[x].theta_dot) ** 2 * sin(bars[x].theta) + 2 * bars[x].velocity * bars[x].theta_dot * cos(bars[x].theta)))
		x += 1
	return vectordistance, vectorvelocity, vectoracceleration


# 	plt.figure(1)
# 	plt.plot(master1, master2)
# 	plt.title('Position analysis of B')
# 	plt.xlabel('point B i')
# 	plt.ylabel('Point B j')
# 	plt.savefig('1')
#
# 	plt.figure(2)
# 	plt.plot(master3, master4)
# 	plt.title('Position analysis of D')
# 	plt.xlabel('point D i')
# 	plt.ylabel('Point D j')
# 	plt.savefig('2')
#
# 	plt.figure(3)
# 	plt.plot(master5, master6)
# 	plt.title('Position analysis of E')
# 	plt.xlabel('point E i')
# 	plt.ylabel('Point E j')
# 	plt.savefig('3')
#
# 	plt.figure(4)
# 	plt.plot(master7,master8)
# 	plt.title('Force analysis of F')
# 	plt.xlabel('Bar Fde')
# 	plt.ylabel('Bar Ffe')
# 	plt.savefig('4')
#
# 	plt.figure(5)
# 	plt.plot(master10,master9)
# 	plt.title('Force analysis of piston')
# 	plt.xlabel('Theta 6')
# 	plt.ylabel('Bar Fcb')
# 	plt.savefig('5')
#
# 	plt.figure(6)
# 	plt.plot(master12, master11)
# 	plt.title('Position')
# 	plt.ylabel('Lenth of piston')
# 	plt.xlabel('Theta 6')
# 	plt.savefig('6')
#
# 	plt.figure(7)
# 	plt.plot(master13,master12)
# 	plt.title('Force analysis of piston')
# 	plt.xlabel('Velocity of piston')
# 	plt.ylabel('Theta 6')
# 	plt.savefig('7')
#
# 	plt.figure(8)
# 	plt.plot(master14,master15)
# 	plt.title('Power')
# 	plt.xlabel('Time')
# 	plt.ylabel('Force*Distance/time')
# 	plt.savefig('8')
# 	plt.show()
#
# q6(14,4,4.5,3.2,7.75)

def sol(feed=False):
	n = 0
	checksleep = False
	print('Hello welcome to my prototype bar solver. Any problem that is solvable and not a double angle problem.')
	num_bar = int(input("How many bars do you have? (3+ and please have them grouped appropriately)"))
	print("Please enter bar information. If you do not have information on a bar leave it empty. Please just enter the number.")
	bars = list()
	groups = list()
	while n < int(num_bar):
		n += 1
		print(n)
		if n != 1:
			if ((n-1) % int(checknum)) == 0:
				checksleep = True
		if n == 1 or checksleep:
			checksleep = False
			checknum = input("is this a 3 or 4 bar part?")
			groups.append(int(checknum))
		distance = input("Distance Meters")
		if distance == "":
			distance = str('r')
		else:
			distance = int(distance)
		velocity = input("Velocity Meters/Second")
		if velocity == "":
			velocity = str('rp')
		else:
			velocity = int(velocity)
		acceleration = input("Acceleration Meters/Second^2")
		if acceleration == "":
			acceleration = str('rpp')
		else:
			acceleration = int(acceleration)
		theta = input("Theta Rad")
		if theta == "":
			theta = str('t')
		else:
			theta = int(theta)
		theta_dot = input("Theta dot Rad/Second")
		if theta_dot == "":
			theta_dot = str('tp')
		else:
			theta_dot = int(theta_dot)
		theta_dot_dot = input("Theta dot dot Rad/Second^2")
		if theta_dot_dot == "":
			theta_dot_dot = str('tpp')
		else:
			theta_dot_dot = int(theta_dot_dot)
		bars.append(Bar(n, distance, velocity, acceleration, theta, theta_dot, theta_dot_dot))
	for x in groups:
		n = 0
		while n < 6:
			n += 1
			a = 0
			missing1 = 0
			missing2 = 0
			missing3 = 0
			while a < 3:
				missing1 += bars[a].missingdata['pair1']
				a += 1
			a = 0
			while a < 3:
				missing2 += bars[a].missingdata['pair2']
				a += 1
			a = 0
			while a < 3:
				missing3 += bars[a].missingdata['pair3']
				a += 1
			if missing1 == 0 and missing2 == 0 and missing3 == 0:
				break
			vr, vrp, vrpp = bargen(bars, x)
			if x == 4 and missing1 == 2:
				eq1 = Eq(vr[0].i + vr[1].i, vr[2].i + vr[3].i)
				eq2 = Eq(vr[0].j + vr[1].j, vr[2].j + vr[3].j)
				eqnum = 2
			elif x == 3 and missing1 == 2:
				eq1 = Eq(vr[0].i, vr[1].i + vr[2].i)
				eq2 = Eq(vr[0].j, vr[1].j + vr[2].j)
				eqnum = 2
			elif x == 4 and missing1 == 1:
				eq1 = Eq(vr[0].i + vr[1].i, vr[2].i + vr[3].i)
				eqnum = 1
			elif x == 3 and missing1 == 1:
				eq1 = Eq(vr[0].i, vr[1].i + vr[2].i)
				eqnum = 1
			elif x == 4 and missing2 == 2:
				eq1 = Eq(vrp[0].i + vrp[1].i, vrp[2].i + vrp[3].i)
				eq2 = Eq(vrp[0].j + vrp[1].j, vrp[2].j + vrp[3].j)
				eqnum = 2
			elif x == 3 and missing2 == 2:
				eq1 = Eq(vrp[0].i, vrp[1].i + vrp[2].i)
				eq2 = Eq(vrp[0].j, vrp[1].j + vrp[2].j)
				eqnum = 2
			elif x == 4 and missing2 == 1:
				eq1 = Eq(vrp[0].i + vrp[1].i, vrp[2].i + vrp[3].i)
				eqnum = 1
			elif x == 3 and missing2 == 1:
				eq1 = Eq(vrp[0].i, vrp[1].i + vrp[2].i)
				eqnum = 1
			elif x == 4 and missing3 == 2:
				eq1 = Eq(vrpp[0].i + vrpp[1].i, vrpp[2].i + vrpp[3].i)
				eq2 = Eq(vrpp[0].j + vrpp[1].j, vrpp[2].j + vrpp[3].j)
				eqnum = 2
			elif x == 3 and missing3 == 2:
				eq1 = Eq(vrpp[0].i, vrpp[1].i + vrpp[2].i)
				eq2 = Eq(vrpp[0].j, vrpp[1].j + vrpp[2].j)
				eqnum = 2
			elif x == 4 and missing3 == 1:
				eq1 = Eq(vrpp[0].i + vrpp[1].i, vrpp[2].i + vrpp[3].i)
				eqnum = 1
			elif x == 3 and missing3 == 1:
				eq1 = Eq(vrpp[0].i, vrpp[1].i + vrpp[2].i)
				eqnum = 1
			else:
				pass
			a, b = solve_linear(eq1)
			if eqnum == 2:
				c, d = solve_linear(eq2)
				e, f = solve_linear(b, d)
				f = float(f)
				varsting = str(e)
				barnum = int(varsting[-1:])
				if varsting[0] == 'r':
					try:
						if varsting[2] == "p":
							bars[barnum].updatemissing('acceleration', f)
							bars[barnum].updatemissing("pair3", bars[barnum].missingdata["pair3"]-1)
					except:pass
					try:
						if varsting[1] == "p":
							bars[barnum].updatemissing("velocity", f)
							bars[barnum].updatemissing("pair2", bars[barnum].missingdata["pair2"]-1)
						else:
							bars[barnum].updatemissing("distance", f)
							bars[barnum].updatemissing("pair1", bars[barnum].missingdata["pair1"]-1)
					except:pass
				else:
					try:
						if varsting[2] == "p":
							bars[barnum].updatemissing('theta_dot_dot', f)
							bars[barnum].updatemissing("pair3", bars[barnum].missingdata["pair3"]-1)
					except:pass
					try:
						if varsting[1] == "p":
							bars[barnum].updatemissing("theta_dot", f)
							bars[barnum].updatemissing("pair2", bars[barnum].missingdata["pair2"]-1)
						else:
							bars[barnum].updatemissing("theta", f)
							bars[barnum].updatemissing("pair1", bars[barnum].missingdata["pair1"]-1)
					except:pass
			else:
				varsting = str(a)
				barnum = int(varsting[-1:])
				if varsting[0] == 'r':
					try:
						if varsting[2] == "p":
							bars[barnum].updatemissing('acceleration', b)
							bars[barnum].updatemissing("pair3", bars[barnum].missingdata["pair3"]-1)
					except:pass
					try:
						if varsting[1] == "p":
							bars[barnum].updatemissing("velocity", b)
							bars[barnum].updatemissing("pair2", bars[barnum].missingdata["pair2"]-1)
						else:
							bars[barnum].updatemissing("distance", b)
							bars[barnum].updatemissing("pair1", bars[barnum].missingdata["pair1"]-1)
					except:pass
				else:
					try:
						if varsting[2] == "p":
							bars[barnum].updatemissing('theta_dot_dot', b)
							bars[barnum].updatemissing("pair3", bars[barnum].missingdata["pair3"]-1)
					except:pass
					try:
						if varsting[1] == "p":
							bars[barnum].updatemissing("theta_dot", b)
							bars[barnum].updatemissing("pair2", bars[barnum].missingdata["pair2"]-1)
						else:
							bars[barnum].updatemissing("theta", b)
							bars[barnum].updatemissing("pair1", bars[barnum].missingdata["pair1"]-1)
					except:pass
	return bars



def run():
	bars = sol()
	for x in bars:
		print(x.distance)
		print(x.velocity)
		print(x.acceleration)
		print(x.theta)
		print(x.theta_dot)
		print(x.theta_dot_dot)
run()
